---
# General state settings
Managed: false #  if true, the FSM is managed, otherwise it is not
StepByStep: false #  if true, transitions that are tagged as StepByStep will behave as Strict transitions, otherwise they behave as Auto transitions
IdleKeepState: false #  if true, the state is kept alive until the transition is triggered by the user
StatesLibraries: # where to look for states libraries
  - "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
  - "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
StatesFiles: #  where to look for states configuration files
  - "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
  - "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
VerboseStateFactory: false # if true, the state factory will provide more information while loading libraries, this is useful for debugging
VerboseState: false
robots: # Additional robots (i.e. objects) to load apart from main robot
  ground:
    module: env/ground

# General constraints to include in the optimization problem, each constraint is representation of a mc_solver::ConstraintSet object
constraints:
  - type: contact # Handle geometric constraints on contacts
  - type: dynamics # Handle dynamics constraints (equation of motion) for a robot
    damper: [0.1, 0.01, 0.5]
  - type: compoundJoint #  Enforces mechanical coupling between linked joints as defined in the robot model
    useCommon: true

# Setup foot contacts
contacts:
  - r1: jvrc1
    r1Surface: LeftFoot
    r2: ground
    r2Surface: AllGround
  - r1: jvrc1
    r1Surface: RightFoot
    r2: ground
    r2Surface: AllGround

# Robot specific options
jvrc1:
  posture:
    stiffness: 1.0
    weight: 10.0

# FSM states
states:
  SimpleHumanoidController::BaseStabilize:
    base: MetaTasks
    tasks:
      CoM:
        type: com
        above: [LeftFoot, RightFoot]
        weight: 2000
        stiffness: 5
      KeepChest:
        type: orientation
        frame: WAIST_R_S
        weight: 100
        stiffness: 1

  # Look at states
  SimpleHumanoidController::LookForward:
    base: MetaTasks
    tasks:
      LookForward:
        type: posture
        activeJoints: ["NECK_P", "NECK_Y"]
        weight: 500
        stiffness: 5.0
        damping: 5.0
        posture:
          - [0.0]
          - [0.0]
        completion:
          AND:
            - eval: 0.05
            - speed: 1e-4

  SimpleHumanoidController::BaseLookAtHand:
    base: MetaTasks
    tasks:
      LookAtHand:
        type: lookAtSurface
        frame: camera_frame
        frameVector: [0, 0, 1]
        weight: 300
        stiffness: 5.0
        damping: 5.0
        activeJoints: ["NECK_P", "NECK_Y"]
        target:
          frame: target_hand_frame
        completion:
          AND:
            - eval: 0.05
            - speed: 1e-4

  SimpleHumanoidController::LookAtLeftHand:
    base: SimpleHumanoidController::BaseLookAtHand
    tasks:
      LookAtHand:
        name: LookAtLeftHand
        frame: lcamera
        target:
          frame: LeftGripper

  SimpleHumanoidController::LookAtRightHand:
    base: SimpleHumanoidController::BaseLookAtHand
    tasks:
      LookAtHand:
        name: LookAtRightHand
        frame: rcamera
        target:
          frame: RightGripper

  # Move hand states defining target poses/keys
  SimpleHumanoidController::MoveLeftHandToInitial:
    base: SimpleHumanoidController_BaseMoveHand
    hand_frame_id: LeftGripper
    hand_pose_key: LeftHandInitialPose
    transform_task_name: MoveLeftHandToInitial

  SimpleHumanoidController::MoveLeftHandToTarget:
    base: SimpleHumanoidController_BaseMoveHand
    hand_frame_id: LeftGripper
    target_pos: [0.5, 0.25, 1.1]
    target_quat: [0, 0.7, 0, 0.7]
    transform_task_name: MoveLeftHandToTarget

  SimpleHumanoidController::MoveRightHandToInitial:
    base: SimpleHumanoidController_BaseMoveHand
    hand_frame_id: RightGripper
    hand_pose_key: RightHandInitialPose
    transform_task_name: MoveRightHandToInitial

  SimpleHumanoidController::MoveRightHandToTarget:
    base: SimpleHumanoidController_BaseMoveHand
    hand_frame_id: RightGripper
    target_pos: [0.5, -0.25, 1.1]
    target_quat: [0, 0.7, 0, 0.7]
    transform_task_name: MoveRightHandToTarget

  # Parallel execution states for move both hands
  SimpleHumanoidController::MoveBothHandsToTarget:
    base: Parallel
    states: ["SimpleHumanoidController::MoveLeftHandToTarget", "SimpleHumanoidController::MoveRightHandToTarget"]

  SimpleHumanoidController::MoveBothHandsToInitial:
    base: Parallel
    states: ["SimpleHumanoidController::MoveLeftHandToInitial", "SimpleHumanoidController::MoveRightHandToInitial"]

  # Meta states for hand movements to target and return
  SimpleHumanoidController::MoveLeftHandMeta:
    base: Meta
    transitions:
      - [SimpleHumanoidController::MoveLeftHandToTarget, OK, SimpleHumanoidController::MoveLeftHandToInitial, Auto]

  SimpleHumanoidController::MoveRightHandMeta:
    base: Meta
    transitions:
      - [SimpleHumanoidController::MoveRightHandToTarget, OK, SimpleHumanoidController::MoveRightHandToInitial, Auto]

  SimpleHumanoidController::MoveBothHandsMeta:
    base: Meta
    transitions:
      - [SimpleHumanoidController::MoveBothHandsToTarget, OK, SimpleHumanoidController::MoveBothHandsToInitial, Auto]

  # Parallel execution states for move and look
  SimpleHumanoidController::MoveAndLookRightHand:
    base: Parallel
    states: ["SimpleHumanoidController::MoveRightHandMeta", "SimpleHumanoidController::LookAtRightHand"]

  SimpleHumanoidController::MoveAndLookLeftHand:
    base: Parallel
    states: ["SimpleHumanoidController::MoveLeftHandMeta", "SimpleHumanoidController::LookAtLeftHand"]

  SimpleHumanoidController::MoveAndLookBothHands:
    base: Parallel
    states: ["SimpleHumanoidController::MoveBothHandsMeta", "SimpleHumanoidController::LookForward"]

  # Demo
  SimpleHumanoidController::DemoMeta:
    base: Meta
    transitions:
      - ["SimpleHumanoidController::MoveAndLookLeftHand", OK, "SimpleHumanoidController::MoveAndLookRightHand", Auto]
      - ["SimpleHumanoidController::MoveAndLookRightHand", OK, "SimpleHumanoidController::MoveAndLookBothHands", Auto]

  # Demo stable
  SimpleHumanoidController::Demo:
    base: Parallel
    states: ["SimpleHumanoidController::BaseStabilize", "SimpleHumanoidController::DemoMeta"]

transitions:
  - [SimpleHumanoidController::Demo, OK, SimpleHumanoidController::Demo, Auto]

init: SimpleHumanoidController::Demo
